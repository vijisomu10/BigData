{
	"name": "LoadRawData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Sales_csv",
						"type": "DatasetReference"
					},
					"name": "RawSalesData"
				},
				{
					"dataset": {
						"referenceName": "US_States_Code",
						"type": "DatasetReference"
					},
					"name": "LoadStateAbbr",
					"description": "United States State Abbreviations"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Sales_Sink",
						"type": "DatasetReference"
					},
					"name": "DimSales"
				}
			],
			"transformations": [
				{
					"name": "DeleteRowsCarModel",
					"description": "Delete Rows - Null Column Value in Car Make or Model"
				},
				{
					"name": "SplitModifyCols",
					"description": "Modify and split several columns"
				},
				{
					"name": "LookupStateCol"
				},
				{
					"name": "UpdateHeadersColumns",
					"description": "Renaming LookupStateCol to deselect alpha_code"
				}
			],
			"scriptLines": [
				"source(output(",
				"          year as short,",
				"          make as string,",
				"          model as string,",
				"          trim as string,",
				"          body as string,",
				"          transmission as string,",
				"          vin as string,",
				"          state as string,",
				"          condition as integer,",
				"          odometer as integer,",
				"          color as string,",
				"          interior as string,",
				"          seller as string,",
				"          mmr as long '###,###,###,###',",
				"          sellingprice as long '000,000,000',",
				"          saledate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RawSalesData",
				"source(output(",
				"          Alpha_code as string,",
				"          State_Abbr as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> LoadStateAbbr",
				"UpdateHeadersColumns filter((!isNull(Make) || Make == '') || (!isNull(Model) || Model =='')) ~> DeleteRowsCarModel",
				"DeleteRowsCarModel derive(Condition = iif(isNull(Condition), 0, Condition),",
				"          Day_Of_Sale = iif(\r",
				"    isNull(SaleDate) || SaleDate == '', \r",
				"    'Unknown', \r",
				"    substring(SaleDate, 0, 4)\r",
				"),",
				"          Sale_Date = iif(\r",
				"    isNull(SaleDate) || SaleDate == '', \r",
				"    'Unknown', \r",
				"    substring(SaleDate, 4, 12)\r",
				"),",
				"          Condition_Rating = iif(Condition >= 1 && Condition <= 10, 'EXCELLENT',\r",
				"iif(Condition >= 11 && Condition <= 20, 'FINE',\r",
				"iif(Condition >= 21 && Condition <= 30, 'VERY GOOD',\r",
				"iif(Condition >= 31 && Condition <= 40, 'GOOD',\r",
				"iif(Condition >= 41 && Condition <= 50, 'RESTORABLE', 'UNKNOWN'))))),",
				"          Transmission = iif(\r",
				"    isNull(Transmission) || trim(Transmission) == '' || lower(Transmission) == 'sedan', \r",
				"    'Manual', \r",
				"    iif(lower(Transmission) == 'automatic', 'Automatic', \r",
				"        concat(upper(substring(Transmission, 0, 1)), substring(Transmission, 1))\r",
				"    )\r",
				"),",
				"          Exterior_Color = iif(     \r",
				"    isNull(Exterior_Color) || trim(Exterior_Color) == '' || !isNull(Exterior_Color) && !regexMatch(lower(Exterior_Color), '^[a-z]+$'),     \r",
				"    'Neutral',    \r",
				"    initCap(Exterior_Color) ),",
				"          Interior_Color = iif(\r",
				"    isNull(Interior_Color) || trim(Interior_Color) == '' || !isNull(Interior_Color) && !regexMatch(lower(Interior_Color), '^[a-z]+$'),\r",
				"    'Neutral',\r",
				"    initCap(Interior_Color)\r",
				"),",
				"          MMR = iif(isNull(MMR), 0, toInteger(MMR)),",
				"          SellingPrice = iif(isNull(SellingPrice), 0, toInteger(SellingPrice)),",
				"          Model = iif(isNull(Model) || isDate(Model), 'Unknown', Model),",
				"          Trim = iif(isNull(Trim), 'Unknown', Trim),",
				"          Body = iif(isNull(Body), 'Unknown', Body)) ~> SplitModifyCols",
				"RawSalesData, LoadStateAbbr lookup(state == Alpha_code,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupStateCol",
				"LookupStateCol select(mapColumn(",
				"          VinID = vin,",
				"          Year = year,",
				"          Make = make,",
				"          Model = model,",
				"          Trim = trim,",
				"          Body = body,",
				"          Transmission = transmission,",
				"          State = state,",
				"          Condition = condition,",
				"          Odometer = odometer,",
				"          Exterior_Color = color,",
				"          Interior_Color = interior,",
				"          Seller = seller,",
				"          MMR = mmr,",
				"          SellingPrice = sellingprice,",
				"          SaleDate = saledate,",
				"          State_Abbr",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> UpdateHeadersColumns",
				"SplitModifyCols sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          VinID,",
				"          Year,",
				"          Make,",
				"          Model,",
				"          Trim,",
				"          Body,",
				"          Transmission,",
				"          State,",
				"          State_Abbr,",
				"          Condition,",
				"          Condition_Rating,",
				"          Odometer,",
				"          Exterior_Color,",
				"          Interior_Color,",
				"          Seller,",
				"          MMR,",
				"          SellingPrice,",
				"          Day_Of_Sale,",
				"          Sale_Date",
				"     )) ~> DimSales"
			]
		}
	}
}