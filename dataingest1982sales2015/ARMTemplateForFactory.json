{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dataingest1982sales2015"
		},
		"Linked_Structured_Data_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'Linked_Structured_Data'"
		},
		"Linked_Structured_Data_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://storage1982sales2015.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/LoadSalesData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SalesRawData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadRawData",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RawSalesData": {},
									"LoadStateAbbr": {},
									"DimSales": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/LoadRawData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sales_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linked_Structured_Data",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "transformoutput",
						"fileSystem": "pipelinesink"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linked_Structured_Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sales_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linked_Structured_Data",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "car_prices.csv",
						"folderPath": "salesfolder",
						"fileSystem": "structdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "make",
						"type": "String"
					},
					{
						"name": "model",
						"type": "String"
					},
					{
						"name": "trim",
						"type": "String"
					},
					{
						"name": "body",
						"type": "String"
					},
					{
						"name": "transmission",
						"type": "String"
					},
					{
						"name": "vin",
						"type": "String"
					},
					{
						"name": "state",
						"type": "String"
					},
					{
						"name": "condition",
						"type": "String"
					},
					{
						"name": "odometer",
						"type": "String"
					},
					{
						"name": "color",
						"type": "String"
					},
					{
						"name": "interior",
						"type": "String"
					},
					{
						"name": "seller",
						"type": "String"
					},
					{
						"name": "mmr",
						"type": "String"
					},
					{
						"name": "sellingprice",
						"type": "String"
					},
					{
						"name": "saledate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linked_Structured_Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/US_States_Code')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linked_Structured_Data",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "US_States_Code.csv",
						"folderPath": "salesfolder",
						"fileSystem": "structdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Alpha_code",
						"type": "String"
					},
					{
						"name": "State_Abbr",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linked_Structured_Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Linked_Structured_Data')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "To retrieve structured data",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('Linked_Structured_Data_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('Linked_Structured_Data_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadRawData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Sales_csv",
								"type": "DatasetReference"
							},
							"name": "RawSalesData"
						},
						{
							"dataset": {
								"referenceName": "US_States_Code",
								"type": "DatasetReference"
							},
							"name": "LoadStateAbbr",
							"description": "United States State Abbreviations"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Sales_Sink",
								"type": "DatasetReference"
							},
							"name": "DimSales"
						}
					],
					"transformations": [
						{
							"name": "DeleteRowsCarModel",
							"description": "Delete Rows - Null Column Value in Car Make or Model"
						},
						{
							"name": "SplitModifyCols",
							"description": "Modify and split several columns"
						},
						{
							"name": "LookupStateCol"
						}
					],
					"scriptLines": [
						"source(output(",
						"          year as short,",
						"          make as string,",
						"          model as string,",
						"          trim as string,",
						"          body as string,",
						"          transmission as string,",
						"          vin as string,",
						"          state as string,",
						"          condition as short,",
						"          odometer as integer,",
						"          color as string,",
						"          interior as string,",
						"          seller as string,",
						"          mmr as integer,",
						"          sellingprice as integer,",
						"          saledate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> RawSalesData",
						"source(output(",
						"          Alpha_code as string,",
						"          State_Abbr as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LoadStateAbbr",
						"LookupStateCol filter((!isNull(make) || make == '') || (!isNull(model) || model =='')) ~> DeleteRowsCarModel",
						"DeleteRowsCarModel derive(day_of_sale = iif(isNull(saledate) || saledate == '', 'Unknown', substring(saledate, 0, 4)),",
						"          sale_date = iif(isNull(saledate) || saledate == '', 'Unknown', substring(saledate, 4, 12)),",
						"          condition_rating = iif(condition >= 1 && condition <= 10, 'EXCELLENT',\r",
						"iif(condition >= 11 && condition <= 20, 'FINE',\r",
						"iif(condition >= 21 && condition <= 30, 'VERY GOOD',\r",
						"iif(condition >= 31 && condition <= 40, 'GOOD',\r",
						"iif(condition >= 41 && condition <= 50, 'RESTORABLE', 'UNKNOWN'))))),",
						"          transmission = iif(\r",
						"    isNull(transmission) || trim(transmission) == '' || lower(transmission) == 'sedan', \r",
						"    'Manual', \r",
						"    iif(lower(transmission) == 'automatic', 'Automatic', \r",
						"        concat(upper(substring(transmission, 0, 1)), substring(transmission, 1))\r",
						"    )\r",
						"),",
						"          color = iif(     \r",
						"    isNull(color) || trim(color) == '' || !isNull(color) && !regexMatch(lower(color), '^[a-z]+$'),     \r",
						"    'Neutral',    \r",
						"    initCap(color) ),",
						"          interior = iif(\r",
						"    isNull(interior) || trim(interior) == '' || !isNull(interior) && !regexMatch(lower(interior), '^[a-z]+$'),\r",
						"    'Neutral',\r",
						"    initCap(interior)\r",
						"),",
						"          State_Abbr = iif(isNull(State_Abbr), 'Unknown', State_Abbr)) ~> SplitModifyCols",
						"RawSalesData, LoadStateAbbr lookup(state == Alpha_code,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupStateCol",
						"SplitModifyCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          vin,",
						"          year,",
						"          make,",
						"          model,",
						"          trim,",
						"          body,",
						"          transmission,",
						"          state = State_Abbr,",
						"          Alpha_code,",
						"          State_Abbr,",
						"          condition,",
						"          condition_rating,",
						"          color,",
						"          interior,",
						"          mmr,",
						"          sellingprice,",
						"          sale_date,",
						"          day_of_sale,",
						"          seller",
						"     )) ~> DimSales"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Sales_csv')]",
				"[concat(variables('factoryId'), '/datasets/US_States_Code')]",
				"[concat(variables('factoryId'), '/datasets/Sales_Sink')]"
			]
		}
	]
}