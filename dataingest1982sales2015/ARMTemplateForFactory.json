{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dataingest1982sales2015"
		},
		"Linked_Structured_Data_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'Linked_Structured_Data'"
		},
		"Linked_Structured_Data_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://storage1982sales2015.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/LoadSalesData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SalesRawData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadRawData",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RawSalesData": {},
									"LoadStateAbbr": {},
									"DimSales": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/LoadRawData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linked_Structured_Data",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "salesfolder",
						"fileSystem": "structdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Alpha_code",
						"type": "String"
					},
					{
						"name": "State_Abbr",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linked_Structured_Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sales_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linked_Structured_Data",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "transformoutput",
						"fileSystem": "pipelinesink"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linked_Structured_Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sales_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linked_Structured_Data",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "car_prices.csv",
						"folderPath": "salesfolder",
						"fileSystem": "structdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "make",
						"type": "String"
					},
					{
						"name": "model",
						"type": "String"
					},
					{
						"name": "trim",
						"type": "String"
					},
					{
						"name": "body",
						"type": "String"
					},
					{
						"name": "transmission",
						"type": "String"
					},
					{
						"name": "vin",
						"type": "String"
					},
					{
						"name": "state",
						"type": "String"
					},
					{
						"name": "condition",
						"type": "String"
					},
					{
						"name": "odometer",
						"type": "String"
					},
					{
						"name": "color",
						"type": "String"
					},
					{
						"name": "interior",
						"type": "String"
					},
					{
						"name": "seller",
						"type": "String"
					},
					{
						"name": "mmr",
						"type": "String"
					},
					{
						"name": "sellingprice",
						"type": "String"
					},
					{
						"name": "saledate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linked_Structured_Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/US_States_Code')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linked_Structured_Data",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "US_States_Code.csv",
						"folderPath": "salesfolder",
						"fileSystem": "structdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Alpha_code",
						"type": "String"
					},
					{
						"name": "State_Abbr",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linked_Structured_Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Linked_Structured_Data')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "To retrieve structured data",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('Linked_Structured_Data_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('Linked_Structured_Data_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadRawData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Sales_csv",
								"type": "DatasetReference"
							},
							"name": "RawSalesData"
						},
						{
							"dataset": {
								"referenceName": "US_States_Code",
								"type": "DatasetReference"
							},
							"name": "LoadStateAbbr",
							"description": "United States State Abbreviations"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Sales_Sink",
								"type": "DatasetReference"
							},
							"name": "DimSales"
						}
					],
					"transformations": [
						{
							"name": "FilterMake",
							"description": "Delete Rows - Null Column Value in Car Make or Model"
						},
						{
							"name": "SplitModifyCols",
							"description": "Modify and split several columns"
						},
						{
							"name": "LookupStateCol"
						},
						{
							"name": "UpdateHeadersColumns",
							"description": "Renaming LookupStateCol to deselect alpha_code"
						},
						{
							"name": "FilterModel"
						},
						{
							"name": "FilterMMR"
						},
						{
							"name": "FilterSellingPrice"
						}
					],
					"scriptLines": [
						"source(output(",
						"          year as short,",
						"          make as string,",
						"          model as string,",
						"          trim as string,",
						"          body as string,",
						"          transmission as string,",
						"          vin as string,",
						"          state as string,",
						"          condition as integer,",
						"          odometer as integer,",
						"          color as string,",
						"          interior as string,",
						"          seller as string,",
						"          mmr as float '##0.##',",
						"          sellingprice as float '##0.##',",
						"          saledate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> RawSalesData",
						"source(output(",
						"          Alpha_code as string,",
						"          State_Abbr as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LoadStateAbbr",
						"UpdateHeadersColumns filter((",
						"    !isNull(Make)",
						")) ~> FilterMake",
						"FilterSellingPrice derive(Condition = iif(isNull(Condition), 49, Condition),",
						"          Day_Of_Sale = iif(\r",
						"    isNull(SaleDate) || SaleDate == '', \r",
						"    'Mon', \r",
						"    substring(SaleDate, 0, 4)\r",
						"),",
						"          Sale_Date = toString(toTimestamp(substring(trim(SaleDate), 5, 11), 'MMM dd yyyy'), 'yyyy-MM-dd'),",
						"          Condition_Rating = iif(Condition >= 1 && Condition <= 10, 'EXCELLENT',\r",
						"iif(Condition >= 11 && Condition <= 20, 'FINE',\r",
						"iif(Condition >= 21 && Condition <= 30, 'VERY GOOD',\r",
						"iif(Condition >= 31 && Condition <= 40, 'GOOD',\r",
						"iif(Condition >= 41 && Condition <= 50, 'RESTORABLE', 'Unrestorable'))))),",
						"          Transmission = iif(isNull(Transmission) || Transmission == 'manual', 'Manual', \r",
						"iif(Transmission == 'automatic' , 'Automatic', 'Hybrid')),",
						"          Exterior_Color = iif(     \r",
						"    isNull(Exterior_Color) || trim(Exterior_Color) == '' || !isNull(Exterior_Color) && !regexMatch(lower(Exterior_Color), '^[a-z]+$'),     \r",
						"    'Neutral',    \r",
						"    initCap(Exterior_Color) ),",
						"          Interior_Color = iif(\r",
						"    isNull(Interior_Color) || trim(Interior_Color) == '' || !isNull(Interior_Color) && !regexMatch(lower(Interior_Color), '^[a-z]+$'),\r",
						"    'Neutral',\r",
						"    initCap(Interior_Color)\r",
						"),",
						"          Model = iif(isNull(Model) || isDate(Model), 'Unknown', Model),",
						"          Trim = iif(isNull(Trim), 'Unknown', Trim),",
						"          Body = iif(isNull(Body), 'Unknown', Body),",
						"          State_Abbr = iif(isNull(State_Abbr), 'Mexico', State_Abbr)) ~> SplitModifyCols",
						"RawSalesData, LoadStateAbbr lookup(state == Alpha_code,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupStateCol",
						"LookupStateCol select(mapColumn(",
						"          VinID = vin,",
						"          Make_Year = year,",
						"          Make = make,",
						"          Model = model,",
						"          Trim = trim,",
						"          Body = body,",
						"          Transmission = transmission,",
						"          State = state,",
						"          Condition = condition,",
						"          Odometer = odometer,",
						"          Exterior_Color = color,",
						"          Interior_Color = interior,",
						"          Seller = seller,",
						"          MMR = mmr,",
						"          SellingPrice = sellingprice,",
						"          SaleDate = saledate,",
						"          State_Abbr",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> UpdateHeadersColumns",
						"FilterMake filter((!isNull(Model))) ~> FilterModel",
						"FilterModel filter((!isNull(MMR))) ~> FilterMMR",
						"FilterMMR filter((!isNull(SellingPrice))) ~> FilterSellingPrice",
						"SplitModifyCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          VinID,",
						"          Make_Year,",
						"          Make,",
						"          Model,",
						"          Car_Trim = Trim,",
						"          Body,",
						"          Transmission,",
						"          State,",
						"          State_Abbr,",
						"          Condition,",
						"          Condition_Rating,",
						"          Odometer,",
						"          Exterior_Color,",
						"          Interior_Color,",
						"          Seller,",
						"          MMR,",
						"          SellingPrice,",
						"          Day_Of_Sale,",
						"          Sale_Date",
						"     )) ~> DimSales"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Sales_csv')]",
				"[concat(variables('factoryId'), '/datasets/US_States_Code')]",
				"[concat(variables('factoryId'), '/datasets/Sales_Sink')]"
			]
		}
	]
}